/*
    Autor: Alexandra-Ioana Varga
    Problema 4, Laborator 11 - dimensiune pipe
    Data modificare: 20.05.2021
    Stadiu: Rezolvata

*/
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <fcntl.h>

#define MAX 100//dimensiune instructiune
char bufArg[MAX][MAX];//dimensiune maxima buffer
int cnt = 0;//nr de intructiuni parsate

///functie de parsare argumente 
void executareArgumente(char cmd[], char bufArg[MAX][MAX], int cnt)
{
    char aux_cmd[MAX];
    strcpy(aux_cmd, cmd);
    char *arg = strtok(aux_cmd, " \n");//string cu argumente comanda
    while (arg)///extrag cu strtok argumentele
    {
        strcpy(bufArg[cnt++], arg);
        arg = strtok(NULL, " \n");
    }
    char *executare[cnt];
    for (int i=0; i<cnt; i++)
    {
        executare[i]=bufArg[i];///pun argumentele pentru execvp
    }
    executare[cnt] = NULL;//ultimul argument e null
    cnt++;
    execvp(executare[0], executare);//se executa comanda in pipe
}

int main(int argc, char **argv)
{
    int fdPipe[2];
    int pid1, pid2;
    char cmd1[MAX], cmd2[MAX], cmd[MAX];
    char *pos;
    while (1)
    {
        printf(">");           // afisare prompter
        fgets(cmd, MAX, stdin); // citire linie de cmd.
        if (!strcmp(cmd, "exit\n"))
            exit(0);
        pos = index(cmd, '|');
        if ((pos == NULL) || (pos == cmd))
        {
            printf("Introduceti 2 cmd. separate de |.\n");
            continue;
        }
        // obtine comanda 1
        if (*(pos - 1) == ' ')
        {
            strncpy(cmd1, cmd, pos - cmd - 1);
            cmd1[pos - cmd - 1] = 0;
        }
        else
        {
            strncpy(cmd1, cmd, pos - cmd);
            cmd1[pos - cmd] = 0;
        }
        // obtine comanda 2
        if (*(pos + 1) == ' ')
            strcpy(cmd2, pos + 2);
        else
            strcpy(cmd2, pos + 1);
        if (cmd2[strlen(cmd2) - 1] == '\n')
            cmd2[strlen(cmd2) - 1] = 0;

        pipe(fdPipe); // creare pipe

        pid1 = fork(); // creare fiu 1
        if (pid1 < 0)
        {
            perror("Eroare creare fiu 1");
            exit(1);
        }
        if (pid1 == 0) // fiu 1
        {
            close(fdPipe[0]);
            dup2(fdPipe[1], 1); // redirectare STDOUT
            close(fdPipe[1]);   // in pipe
            printf("%s\n",cmd1);
            cnt = 0;
            for (int i = 0; i < MAX; i++)
            {
                for (int j = 0; j < strlen(bufArg[i]); j++)
                {
                    bufArg[i][j] = NULL;
                }
            }
            executareArgumente(cmd1, bufArg, cnt);
            perror("Eroare executie comanda 1");
            exit(0);
        }
        pid2 = fork(); // creare fiu 2
        if (pid2 < 0)
        {
            perror("Eroare creare fiu 2");
            exit(1);
        }
        if (pid2 == 0) // fiu 2
        {
            close(fdPipe[1]);
            dup2(fdPipe[0], 0); // redirectare STDIN
            close(fdPipe[0]);   // din pipe
            cnt = 0;
            for (int i = 0; i < MAX; i++)
            {
                for (int j = 0; j < strlen(bufArg[i]); j++)
                {
                    bufArg[i][j] = NULL;
                }
            }
            printf("%s\n",cmd2);
            executareArgumente(cmd2, bufArg, cnt);
            perror("Eroare executie comanda 2");
            exit(0);
        }
        close(fdPipe[0]);
        close(fdPipe[1]);
        waitpid(pid1, NULL, 0); // asteapta primul fiu
        waitpid(pid2, NULL, 0); // asteapta al doilea fiu
    }       
} 
